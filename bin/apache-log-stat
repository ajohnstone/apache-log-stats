#!/usr/bin/env perl

use strict;
use warnings FATAL => 'all';
use constant DEBUG => $ENV{DEBUG} || 0;

our $VERSION = '0.1';

package Apache::Log::Stats;

use strict;
use warnings FATAL => 'all';

use constant DEBUG => $ENV{DEBUG} || 0;

use Getopt::Long;
use Pod::Usage;
use IO::Zlib;
use Time::HiRes 'time';
use Data::Dumper;
use List::Util qw[min max];

sub new {
  my ( $class, %args ) = @_;

  my $self = {
    debug => DEBUG,
    data => {},
    stats => {
      total_requests => 0,
      sqsum_requests => 0,
    },
    history => {
    },

    total => {},
    files => {},

    topn => {},
    %args
  };

  return bless $self, $class;
}

sub run {
  my ( $self, $file ) = @_;

  # use stdin if no files supplied
  @ARGV = '-' unless @ARGV ;

  my ($man, $help, $version, $histogram) = (0, 0, 0, 0);

  GetOptions(
    'help|?' => \$help,
    'man' => \$man,
    'version' => sub {
      print "$0 - $VERSION\n";
      exit;
    },
    'report-histogram' => \$histogram,
  ) or pod2usage(2);
  pod2usage(1) if $help;
  pod2usage(-verbose => 2) if $man;

  pod2usage("$0: No files given.")  if ((@ARGV == 0) && (-t STDIN));

  print "Processing\n".("=" x 20)."\n\n";

  foreach my $file (@ARGV) {

    print "$file - ";
    my $fh = new IO::Zlib($file, "rb") or die "Could not open file.gz: $!\n";

    if (defined $fh) {

      my ($i, $cnt) = (0, 0);
      FILTER: while (my $line = $fh->getline()) {

        my $start = time;
        if ($i == 0) {
          my $start = time;
        }

        chomp($line);
        my ($host, $date, $method, $url, $version, $status, $bytes, $domain) = $line =~
              /^(\S+) - - \[(\d{2}+\/\S{3}\/\d{4}+:\d{2}:\d{2}:\d{2} [+-]\d{4})\] "(\S+) (\S+) (\S+)" (\S+) (\S+) (\S+).*/;

        next if (!defined($date));

        my ($day, $month, $year, $hour, $min, $sec) = $date =~ 
              /^(\d{2}+)\/(\S{3})\/(\d{4}+):(\d{2}):(\d{2}):(\d{2}).*/;

        $self->{data}{$date}{cnt}++;
        $self->{stats}{total_requests}++;

        if (!defined($self->{stats}{max_requests}) || (defined($self->{stats}{max_requests}) && $self->{data}{$date}{cnt} > $self->{data}{ $self->{stats}{max_requests} }{cnt}) ) {
           $self->{stats}{max_requests} = $date;
        }

        $self->{historical_hour}{"$hour"}++;
        $self->{historical_server_hour}{"$hour"}{$file}++;

        if ($i % 10000 == 0) {
          my $diff = time - $start;
          STDOUT->printflush("$cnt in $diff\n") if ($self->{debug});
          $i=0;
        }

        $i++;
        $cnt++;

      };
      $fh->close;

      if (defined($self->{data})) {
        foreach my $item(keys %{$self->{data}}) {
          $self->{stats}{sqsum_requests}+= $self->{data}{$item}{cnt} * $self->{data}{$item}{cnt};
        #  printf "%s -> %s\n", $item, $self->{data}{$item}{cnt};
        }
      }

      #print Dumper(\%stats);

      my $num = scalar keys %{$self->{data}};
      my $avg = ($num != 0)? ($self->{stats}{total_requests} / $num) : 0;
      my $var = ($num != 0)? ($self->{stats}{sqsum_requests} / $num - $avg * $avg) : 0;
      my $std = sqrt($var);

      $self->{stats}{avg_requests_per_second} = $avg;
      $self->{stats}{variance_requests_per_second} = $var;
      $self->{stats}{stddev_requests_per_second} = $std;
      $self->{stats}{max_requests_per_second} = (defined($self->{stats}{max_requests}) && defined($self->{data}{ $self->{stats}{max_requests} }{cnt})? $self->{data}{ $self->{stats}{max_requests} }{cnt} : 0);

      foreach my $s (keys %{$self->{stats}}) {
        next if (grep(/$s/, qw(max_requests sqsum_requests)));

        printf "%s: ", $s;

        if (!defined($self->{stats}{$s})) {
          print '-';
        } elsif($self->{stats}{$s} =~ m/^\d+$/) {
          printf "% 4d", $self->{stats}{$s};
        } elsif($self->{stats}{$s} =~ m/^\d+.\d+$/) {
          printf '%.2f', $self->{stats}{$s};
        } else {
          print $s;
        }
        print "\t";
      }
      print "\n";

      $self->{files}{$file} = $self->{stats};

      $self->{data} = {};
      $self->{stats} = {
        total_requests => 0,
        sqsum_requests => 0,
      };

    }

  }

  print "Total:\t";

  foreach my $file (keys %{$self->{files}}) {
    foreach my $item (keys %{$self->{files}{$file}}) {
      next if ($item eq 'max_requests' || !defined($self->{files}{$file}{$item}));
      $self->{total}{$item} =0 if (!defined($self->{total}{$item}));
      $self->{total}{$item} += $self->{files}{$file}{$item};
    }
  }

  foreach my $s (keys %{$self->{total}}) {
    next if (grep(/$s/, qw(max_requests sqsum_requests)));

    printf "%s: ", $s;

    if (!defined($self->{total}{$s})) {
      print '-';
    } elsif($self->{total}{$s} =~ m/^\d+$/) {
      printf "% 4d", $self->{total}{$s};
    } elsif($self->{total}{$s} =~ m/^\d+.\d+$/) {
      printf '%.2f', $self->{total}{$s};
    } else {
      print $s;
    }
    print "\t";
  }
  print "\n";

  # Charts

  my $max = 0;
  $max+= $self->{historical_hour}{$_} foreach(keys %{$self->{historical_hour}});
  my %graphs = (
    requests_per_hour => {
      order => 1,
      title => "Requests per hour",
      max => $max,
      key => 'historical_hour',
    },
    distribution_by_server => {
      order => 2,
      title => "Comparison by distribution of requests per server over an hour",
      max => $self->{historical_server_hour}{ (sort { $self->{historical_server_hour}{$a} <=> $self->{historical_server_hour}{$b} } keys %{$self->{historical_server_hour}})[-1] },
      key => 'historical_server_hour',
    },
  );

  foreach my $chart_key (sort { $graphs{$a} <=> $graphs{$b} } keys %graphs) {
    my $key = $graphs{$chart_key}{key};
    my $chart = $graphs{$chart_key};
    my $max_length = length($chart->{max});
    print "\n\n$chart->{title}\n".("=" x 20)."\n\n";

    # Refactor  
    if ($key eq 'historical_hour') {

      foreach my $s (sort { $a <=> $b } keys %{$self->{historical_hour}}) {
        my $v = $self->{ $graphs{$chart_key}{key} }{$s};
        my $percent = (($v / $chart->{max}) * 100);
        printf("% 5s %s %s\t%${max_length}s / %${max_length}s (%6.2f%% )\tvar: % ${max_length}s\trqs: %3.d\trqm: %3.d\n", $s, "#" x ($percent) . "  ", " " x (100 - $percent), $v, $chart->{max}, $percent, $chart->{max} - $v, $v/3600, $v/60);
      }
  
    } elsif ($key eq 'historical_server_hour') {

     foreach my $hour (sort { $a <=> $b } keys %{$self->{historical_server_hour}}) {
         my $max = $self->{historical_server_hour}{$hour}{ (sort { $self->{historical_server_hour}{$hour}{$a} <=> $self->{historical_server_hour}{$hour}{$b} } keys %{$self->{historical_server_hour}{$hour}})[-1] };
         my $max_length = length($max);
         foreach my $s (sort keys %{$self->{historical_server_hour}{$hour}}) {
          my $v = $self->{historical_server_hour}{$hour}{$s};
          my $percent = (($v / $max) * 100);
          printf("% 5s %s %s %s\t%${max_length}s / %${max_length}s (%6.2f%% )\tvar: % ${max_length}s\trqs: %3.d\trqm: %3.d\n", $hour, $s, "#" x ($percent) . "  ", " " x (100 - $percent), $v, $max, $percent, $max - $v, $v/3600, $v/60);
        }
      }
      print "\n";
    }
  }
  print "\n\n";

}
1;

sub main {
  @ARGV = @_;  # set global ARGV for this package
  my $a = new Apache::Log::Stats;
  $a->run();
}

# ############################################################################
# Run the program.
# ############################################################################
if ( !caller ) { exit main(@ARGV); }

1;


# ############################################################################
# Documentation
# ############################################################################
=pod

=head1 NAME

apache-log-stats - Extract statistics from apache log files, such as apache requests per second.

=head1 SYNOPSIS

Usage: apache-log-stats [OPTION...] files

=over 8

=item apache-log-stat.pl $(ls b2f*_ApacheAccess.2011-12-05.gz);

=item apache-log-stat.pl b2f01_ApacheAccess.2011-12-05.gz b2f02_ApacheAccess.2011-12-05.gz;

=item cat b2f01_ApacheAccess.2011-12-05.gz | perl apache-log-stat.pl;

=item zcat b2f01_ApacheAccess.2011-12-05.gz | perl apache-log-stat.pl;

=back

=head1 DESCRIPTION

apache-log-stats - analyses apache log files and produces various statistics.

=head1 SYSTEM REQUIREMENTS

You need Perl and some core packages that ought to be
installed in any reasonably new version of Perl.

=head1 DOWNLOADING

Visit L<https://github.com/ajohnstone/apache-log-stats> to download the
latest release of apache-log-stats.

=head1 AUTHORS

Andrew Johnstone <andrew@ajohnstone.com>

=head1 COPYRIGHT, LICENSE, AND WARRANTY

This program is copyright 2012-2013 Andrew Johnstone.
Feedback and improvements are welcome.

THIS PROGRAM IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, version 2; OR the Perl Artistic License.  On UNIX and similar
systems, you can issue `man perlgpl' or `man perlartistic' to read these
licenses.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA  02111-1307  USA.

=head1 VERSION

apache-log-stats 0.1

=cut
